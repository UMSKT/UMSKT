# This file is a part of the UMSKT Project
#
# Copyleft (C) 2019-2023 UMSKT Contributors (et.al.)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# @FileCreated by TheTank20 on 07/08/2025
# @Maintainer Neo

name: C/C++ CI (Windows ARM)

on:
  push:
    branches: [ "*" ]
    paths-ignore: [ '**.md', 'doc/**', '.idea/**']
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    strategy:
        fail-fast: false
        matrix:
            arch: [arm, arm64]
            include:
              - arch: arm
                arch_compilename: amd64_arm
                vcpkg_arch: arm-windows-static
                cmake_arch: ARM
                sdk_version: '10.0.19041.0'
              - arch: arm64
                arch_compilename: arm64
                vcpkg_arch: arm64-windows-static
                cmake_arch: ARM64
                sdk_version: '10.0.22621.0'
    steps:
      - name: Setup MSVC for ${{ matrix.arch }}
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch_compilename }}
          sdk: ${{ matrix.sdk_version }}

      - name: Checkout Source Tree
        uses: actions/checkout@v4

      - name: Setup vcpkg
        shell: pwsh
        run: |
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          echo "VCPKG_ROOT=$env:GITHUB_WORKSPACE/vcpkg" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VCPKG_DEFAULT_BINARY_CACHE=$env:GITHUB_WORKSPACE/vcpkg/bincache" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "VCPKG_BINARY_SOURCES=clear;default,readwrite" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache vcpkg packages
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/vcpkg/bincache
            ${{ github.workspace }}/vcpkg/installed
            ${{ github.workspace }}/vcpkg/packages
          key: vcpkg-${{ matrix.arch }}-${{ hashFiles('**/CMakeLists.txt') }}-${{ hashFiles('**/*.cmake') }}
          restore-keys: |
            vcpkg-${{ matrix.arch }}-${{ hashFiles('**/CMakeLists.txt') }}-
            vcpkg-${{ matrix.arch }}-

      - name: Install OpenSSL
        shell: pwsh
        run: |
          if ("${{ matrix.arch }}" -eq "arm") {
            # For ARM32, build OpenSSL from source
            $opensslVersion = "1.1.1w"
            $opensslDir = "openssl-src"
            
            # Download OpenSSL source
            Invoke-WebRequest -Uri "https://www.openssl.org/source/openssl-$opensslVersion.tar.gz" -OutFile "openssl.tar.gz"
            tar -xf openssl.tar.gz
            Rename-Item -Path "openssl-$opensslVersion" -NewName $opensslDir
            cd $opensslDir
            
            # Install Perl if needed
            choco install strawberryperl -y
            
            # Configure and build OpenSSL for ARM32
            $env:PATH = "C:\Strawberry\perl\bin;$env:PATH"
            perl Configure VC-WIN32-ARM no-shared no-asm --prefix="$env:GITHUB_WORKSPACE/openssl-install"
            
            # Use MSVC ARM32 tools
            $vcvarsall = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"
            cmd /c "`"$vcvarsall`" amd64_arm && nmake && nmake install"
            
            # Set environment variables
            echo "OPENSSL_ROOT_DIR=$env:GITHUB_WORKSPACE/openssl-install" | Out-File -FilePath $env:GITHUB_ENV -Append
            echo "OPENSSL_USE_STATIC_LIBS=TRUE" | Out-File -FilePath $env:GITHUB_ENV -Append
            cd ..
          } else {
            # For ARM64, use vcpkg as before
            New-Item -ItemType Directory -Force -Path $env:VCPKG_DEFAULT_BINARY_CACHE
            & "$env:VCPKG_ROOT\vcpkg.exe" install openssl:${{ matrix.vcpkg_arch }} --clean-after-build
            echo "OPENSSL_ROOT_DIR=$env:VCPKG_ROOT/installed/${{ matrix.vcpkg_arch }}" | Out-File -FilePath $env:GITHUB_ENV -Append
          }

      - name: Configure UMSKT
        shell: pwsh
        run: |
          cmake -G "Visual Studio 17 2022" `
            -A ${{ matrix.cmake_arch }} `
            -DWINDOWS_ARM=ON `
            -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" `
            -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_arch }} `
            .

      - name: Build UMSKT
        shell: pwsh
        run: |
          cmake --build . --config Release

      - name: Upload build artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: UMSKT-WinNT-${{ matrix.arch }}
          path: Release/umskt.exe

  test-arm64:
    needs: build
    if: success()
    runs-on: windows-11-arm
    strategy:
      matrix:
        arch: [arm64]
    steps:
      - name: Download ARM64 artifact
        uses: actions/download-artifact@v4
        with:
          name: UMSKT-WinNT-${{ matrix.arch }}
          path: .

      - name: Run tests
        shell: pwsh
        run: |
          Write-Host Test 1 - generating key
          .\umskt.exe -b 2C -c 365 -s 069420 -v
          Write-Host Test 2 - generatng confid
          .\umskt.exe -i 253286028742154311079061239762245184619981623171292574 